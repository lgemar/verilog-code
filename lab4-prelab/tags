!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Branchtype	lukas.cpp	/^static string_map Branchtype = { {"beq", 4}, {"bne", 5} };$/;"	v	file:
CC	Makefile	/^CC=clang++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-ggdb3 -Wall -Werror -std=c++11 -O0$/;"	m
Itype	lukas.cpp	/^static string_map Itype = {{"addi", 8}, {"andi", 12}, {"ori", 13}, $/;"	v	file:
JMASK	ivan.cpp	14;"	d	file:
Jtype	lukas.cpp	/^static string_map Jtype = {{"j", 2}, {"jal", 3}, {"jr", 8}};$/;"	v	file:
MemoryOps	lukas.cpp	/^static string_map MemoryOps = { {"lw", 35}, {"sw", 43} };$/;"	v	file:
PC	lukas.cpp	/^static unsigned PC = 0;$/;"	v	file:
Rtype	lukas.cpp	/^static string_map Rtype = {$/;"	v	file:
SHIFT_OFFSET	ivan.cpp	/^       SHIFT_RD = 11, SHIFT_SHMT = 6, SHIFT_OFFSET = 16 };$/;"	e	enum:__anon1	file:
SHIFT_OP	ivan.cpp	/^enum { SHIFT_OP = 26, SHIFT_RS = 21, SHIFT_RT = 16, $/;"	e	enum:__anon1	file:
SHIFT_RD	ivan.cpp	/^       SHIFT_RD = 11, SHIFT_SHMT = 6, SHIFT_OFFSET = 16 };$/;"	e	enum:__anon1	file:
SHIFT_RS	ivan.cpp	/^enum { SHIFT_OP = 26, SHIFT_RS = 21, SHIFT_RT = 16, $/;"	e	enum:__anon1	file:
SHIFT_RT	ivan.cpp	/^enum { SHIFT_OP = 26, SHIFT_RS = 21, SHIFT_RT = 16, $/;"	e	enum:__anon1	file:
SHIFT_SHMT	ivan.cpp	/^       SHIFT_RD = 11, SHIFT_SHMT = 6, SHIFT_OFFSET = 16 };$/;"	e	enum:__anon1	file:
Shifttype	lukas.cpp	/^static string_map Shifttype =  { {"sll", 0}, {"sra", 3}, {"srl", 2} };$/;"	v	file:
Str2Reg	lukas.cpp	/^static string_map Str2Reg = {$/;"	v	file:
TEXT_START	ivan.cpp	15;"	d	file:
WHITESPACE	ivan.cpp	12;"	d	file:
assemble	ivan.cpp	/^int assemble(ifstream& asmfile, ofstream& machine) {$/;"	f
build_branch	lukas.cpp	/^unsigned build_branch(string_array s) {$/;"	f
build_i	lukas.cpp	/^unsigned build_i(string_array s) {$/;"	f
build_jump	lukas.cpp	/^unsigned build_jump(string_array s) {$/;"	f
build_memoryop	lukas.cpp	/^unsigned build_memoryop(string_array s) {$/;"	f
build_r	lukas.cpp	/^unsigned build_r(string_array s) {$/;"	f
build_shift	lukas.cpp	/^unsigned build_shift(string_array s) {$/;"	f
error	ivan.cpp	/^static int error;$/;"	v	file:
extract_code	ivan.cpp	/^string extract_code(string const line) {$/;"	f
extract_comma	ivan.cpp	/^string extract_comma(string reg) {$/;"	f
fhex	ivan.cpp	13;"	d	file:
flush_commands	lukas.cpp	/^void flush_commands(std::ofstream& output) {$/;"	f
get_keys	ivan.cpp	/^set<string> get_keys(map<string, int> m) {$/;"	f
get_labels	ivan.cpp	/^void get_labels(ifstream& asmfile) {$/;"	f
get_reg	ivan.cpp	/^int get_reg(string reg) {$/;"	f
has_only_spaces	ivan.cpp	/^bool has_only_spaces(const string& str) {$/;"	f
has_only_whitespace	lukas.cpp	/^bool has_only_whitespace(const std::string& str) {$/;"	f
hello	test.asm	/^hello:	slti	$t0, $s3, -40$/;"	l
instruction_table	lukas.cpp	/^typedef typename std::vector<string_array> instruction_table;$/;"	t	file:
instructions	lukas.cpp	/^static instruction_table instructions;$/;"	v	file:
is_comment	ivan.cpp	/^bool is_comment(string field) {$/;"	f
is_label	ivan.cpp	/^bool is_label(string field) {$/;"	f
is_label	lukas.cpp	/^bool is_label(const char* token) {$/;"	f
labels	lukas.cpp	/^static string_map labels;$/;"	v	file:
lookup	lukas.cpp	/^unsigned lookup(std::string s) {$/;"	f
main	ivan.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	lukas.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test.asm	/^main:	addi	$s0, $zero, 5   	# $s0 = 5$/;"	l
make_branch	ivan.cpp	/^int make_branch(string instr, string rest) {$/;"	f
make_inst	ivan.cpp	/^int make_inst(string const line) {$/;"	f
make_itype	ivan.cpp	/^int make_itype(string instr, string rest) {$/;"	f
make_jtype	ivan.cpp	/^int make_jtype(string instr, string rest) {$/;"	f
make_load_store	ivan.cpp	/^int make_load_store(string instr, string rest) {$/;"	f
make_rtype	ivan.cpp	/^int make_rtype(string instr, string rest) {$/;"	f
make_shift_type	ivan.cpp	/^int make_shift_type(string instr, string rest) {$/;"	f
nop	ivan.cpp	/^static string nop = "nop";$/;"	v	file:
parse_command	lukas.cpp	/^string_array parse_command(std::string line) {$/;"	f
pc	ivan.cpp	/^static unsigned pc = TEXT_START;$/;"	v	file:
process_instr	ivan.cpp	/^int process_instr(string instr, string rest) {$/;"	f
process_label	ivan.cpp	/^pair<string, int> process_label(string const line) {$/;"	f
split	ivan.cpp	/^vector<string> split(string rest) {$/;"	f
string_array	lukas.cpp	/^typedef typename std::vector<std::string> string_array;$/;"	t	file:
string_map	lukas.cpp	/^typedef typename std::map<std::string, unsigned> string_map;$/;"	t	file:
symbol_table	ivan.cpp	/^static map<string, int> symbol_table;$/;"	v	file:
test	test.asm	/^test:	sll	$t1, $s3, 2$/;"	l
trim	ivan.cpp	/^string trim(const string& str, const string& whitespace) {$/;"	f
